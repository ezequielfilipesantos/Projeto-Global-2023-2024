-- Enum for Access Levels
CREATE TYPE AccessLevel AS ENUM ('Patient', 'MedicalProfessional', 'Admin');

-- Enum for RequestIncapacity Status
CREATE TYPE RequestIncapacityStatus AS ENUM ('Pending', 'Approved', 'Rejected');

-- Function to Update Incapacity Request Status
CREATE OR REPLACE FUNCTION update_request_status(
    p_request_id INT,
    p_status RequestIncapacityStatus
)
RETURNS VOID
AS
$$
BEGIN
    UPDATE RequestIncapacity
    SET requestStatus = p_status, lastModifiedDate = CURRENT_DATE
    WHERE requestID = p_request_id;
END;
$$
LANGUAGE plpgsql;

-- Function to Create Login
CREATE OR REPLACE FUNCTION create_login(
    p_email VARCHAR(255),
    p_password VARCHAR(255),
    p_access_level AccessLevel
)
RETURNS INT
AS
$$
DECLARE
    new_login_id INT;
BEGIN
    INSERT INTO Logins (email, password, accessLevel)
    VALUES (p_email, p_password, p_access_level)
    RETURNING loginID INTO new_login_id;
    
    RETURN new_login_id;
END;
$$
LANGUAGE plpgsql;

-- Function to Add Patient Details
CREATE OR REPLACE FUNCTION add_patient_details(
    p_login_id INT,
    p_name VARCHAR(255),
    p_nif VARCHAR(20),
    p_cc INT,
    p_date_of_birth DATE,
    p_nationality VARCHAR(50),
    p_street VARCHAR(255),
    p_contact_number INT,
    p_niss INT,
    p_dsic_issuance_date INT,
    p_validity VARCHAR(20),
    p_issuance_location VARCHAR(255),
    p_birth_location VARCHAR(255),
    p_residence_street VARCHAR(255),
    p_residence_location VARCHAR(255)
)
RETURNS VOID
AS
$$
BEGIN
    INSERT INTO PatientDetails (
        loginID, name, nif, cc, dateOfBirth, nationality, street, contactNumber,
        niss, dsicIssuanceDate, validity, issuanceLocation, birthLocation,
        residenceStreet, residenceLocation
    )
    VALUES (
        p_login_id, p_name, p_nif, p_cc, p_date_of_birth, p_nationality,
        p_street, p_contact_number, p_niss, p_dsic_issuance_date,
        p_validity, p_issuance_location, p_birth_location,
        p_residence_street, p_residence_location
    );
END;
$$
LANGUAGE plpgsql;

-- Function to Update Request Status
CREATE OR REPLACE FUNCTION update_request_status(
    p_request_id INT,
    p_status RequestIncapacityStatus
)
RETURNS VOID
AS
$$
BEGIN
    UPDATE RequestIncapacity
    SET requestStatus = p_status, lastModifiedDate = CURRENT_DATE
    WHERE requestID = p_request_id;
END;
$$
LANGUAGE plpgsql;

-- Add more functions and procedures as needed
